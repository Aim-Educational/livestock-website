// All editor divs start with 'editor-' as their ID, followed by the DataType they're used for.
// So get all editors, then put them into a dictionary with their DataType as the key.
let editorsHtml = document.querySelectorAll('*[id^="editor-"]');
if (editorsHtml === null)
    alert("Dev error: No editor divs found.");

let editors: { [editorName: string]: Element } = {}; // Why this syntax, web devs, why....
editorsHtml.forEach(function (elem: Element) {
    editors[elem.id.replace("editor-", "")] = elem;
});

// Get the <select> element the user gets to use.
let editorSelector = <HTMLSelectElement>document.querySelector('*[id="editorSelect"]');
if (editorSelector === null)
    alert("Dev error: No <select> element called 'editorSelect'");

// Function call is generated by the Razor template.
function setupEditors(eventTypes: { [eventName: string]: string }) {
    // Make an alert for every DataType we don't have an editor for.
    // Also populate the select element.
    for (let key in eventTypes) {
        let value: string = eventTypes[key];

        if (!(value in editors))
            alert(`Dev error: No editor for DataType '${value}'`);

        let option: HTMLOptionElement = document.createElement("option");
        option.text = key;
        editorSelector.add(option);
    }

    // Set the handler for when a new option is selected.
    editorSelector.addEventListener("change", function () {
        // Hide all editors.
        editorsHtml.forEach(function (e) {
            if (!e.classList.contains("d-none"))
                e.classList.add("d-none");
        });

        // Then unhide the one we want.
        let thisEditor = editors[eventTypes[editorSelector.value]];
        thisEditor.classList.remove("d-none");

        // And set the data type input.
        let dataTypeInput = <HTMLInputElement>thisEditor.querySelector(".data-type-input");
        if (dataTypeInput === null) {
            alert(`Editor for '${editorSelector.value}' does not have a hidden input of class 'data-type-input'`);
            return;
        }

        dataTypeInput.value = editorSelector.value;
    });

    // Show the right default editor
    editorSelector.dispatchEvent(new Event("change"));
}