// <auto-generated />
using System;
using Database.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(LivestockContext))]
    partial class LivestockContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Models.AdmmGroupMap", b =>
                {
                    b.Property<int>("AdmmGroupMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("admm_group_map_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupEntityDataId")
                        .HasColumnName("group_entity_data_id");

                    b.Property<int>("GroupEntityDataType")
                        .HasColumnName("group_entity_data_type");

                    b.Property<int>("GroupEntityUserId")
                        .HasColumnName("group_entity_user_id");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.HasKey("AdmmGroupMapId");

                    b.HasIndex("GroupEntityUserId", "GroupEntityDataId")
                        .IsUnique()
                        .HasName("IX_admm_group_map_user_data_ids");

                    b.HasIndex("GroupEntityUserId", "GroupEntityDataType")
                        .HasName("IX_admm_group_map_user_datatypes");

                    b.HasIndex("GroupEntityUserId", "GroupEntityDataType", "GroupEntityDataId")
                        .IsUnique()
                        .HasName("IX_admm_group_map_id");

                    b.ToTable("admm_group_map");
                });

            modelBuilder.Entity("Database.Models.AdmuGroup", b =>
                {
                    b.Property<int>("AdmuGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("admu_group_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(255);

                    b.Property<int>("GroupType")
                        .HasColumnName("group_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.HasKey("AdmuGroupId");

                    b.ToTable("admu_group");
                });

            modelBuilder.Entity("Database.Models.AlUserInfo", b =>
                {
                    b.Property<int>("AlUserInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("al_user_info_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(150);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(150);

                    b.Property<bool>("PrivacyConsent")
                        .HasColumnName("privacy_consent");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<bool>("TosConsent")
                        .HasColumnName("tos_consent");

                    b.HasKey("AlUserInfoId");

                    b.ToTable("al_user_info");
                });

            modelBuilder.Entity("Database.Models.Breed", b =>
                {
                    b.Property<int>("BreedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("breed_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BreedSocietyContactId")
                        .HasColumnName("breed_society_contact_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<int>("CritterTypeId")
                        .HasColumnName("critter_type_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.Property<bool>("Registerable")
                        .HasColumnName("registerable");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("BreedId");

                    b.HasIndex("BreedSocietyContactId");

                    b.HasIndex("CritterTypeId");

                    b.ToTable("breed");
                });

            modelBuilder.Entity("Database.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contact_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasMaxLength(100);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnName("email_address")
                        .HasMaxLength(100);

                    b.Property<bool>("IsCustomer")
                        .HasColumnName("is_customer");

                    b.Property<bool>("IsSupplier")
                        .HasColumnName("is_supplier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber1")
                        .IsRequired()
                        .HasColumnName("phone_number1")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber2")
                        .IsRequired()
                        .HasColumnName("phone_number2")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber3")
                        .IsRequired()
                        .HasColumnName("phone_number3")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber4")
                        .IsRequired()
                        .HasColumnName("phone_number4")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("ContactId");

                    b.ToTable("contact");
                });

            modelBuilder.Entity("Database.Models.Critter", b =>
                {
                    b.Property<int>("CritterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("critter_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BreedId")
                        .HasColumnName("breed_id");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<int?>("CritterImageId")
                        .HasColumnName("critter_image_id");

                    b.Property<int>("CritterTypeId")
                        .HasColumnName("critter_type_id");

                    b.Property<int>("DadCritterId")
                        .HasColumnName("dad_critter_id");

                    b.Property<string>("DadFurther")
                        .HasColumnName("dad_further")
                        .HasMaxLength(255);

                    b.Property<int>("Flags")
                        .HasColumnName("flags");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnName("gender")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int>("MumCritterId")
                        .HasColumnName("mum_critter_id");

                    b.Property<string>("MumFurther")
                        .HasColumnName("mum_further")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int>("OwnerContactId")
                        .HasColumnName("owner_contact_id");

                    b.Property<string>("TagNumber")
                        .IsRequired()
                        .HasColumnName("tag_number")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("CritterId");

                    b.HasIndex("BreedId");

                    b.HasIndex("CritterImageId");

                    b.HasIndex("CritterTypeId");

                    b.HasIndex("DadCritterId");

                    b.HasIndex("MumCritterId");

                    b.HasIndex("OwnerContactId");

                    b.HasIndex("TagNumber")
                        .IsUnique()
                        .HasName("IX_UNIQ_tag_number");

                    b.ToTable("critter");
                });

            modelBuilder.Entity("Database.Models.CritterImage", b =>
                {
                    b.Property<int>("CritterImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("critter_image_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnName("data");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.HasKey("CritterImageId");

                    b.ToTable("critter_image");
                });

            modelBuilder.Entity("Database.Models.CritterImageVariant", b =>
                {
                    b.Property<int>("CritterImageVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("critter_image_variant_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CritterImageModifiedId")
                        .HasColumnName("critter_image_modified_id");

                    b.Property<int>("CritterImageOriginalId")
                        .HasColumnName("critter_image_original_id");

                    b.Property<int>("Height")
                        .HasColumnName("height");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("Width")
                        .HasColumnName("width");

                    b.HasKey("CritterImageVariantId");

                    b.HasIndex("CritterImageModifiedId");

                    b.HasIndex("CritterImageOriginalId", "CritterImageModifiedId")
                        .IsUnique()
                        .HasName("IX_critter_image_variant_id_pairs");

                    b.HasIndex("CritterImageOriginalId", "Width", "Height")
                        .IsUnique()
                        .HasName("IX_critter_image_variant_id_size");

                    b.ToTable("critter_image_variant");
                });

            modelBuilder.Entity("Database.Models.CritterLifeEvent", b =>
                {
                    b.Property<int>("CritterLifeEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("critter_life_event_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<int>("CritterId")
                        .HasColumnName("critter_id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnName("date_time")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.Property<int>("EnumCritterLifeEventDataId")
                        .HasColumnName("enum_critter_life_event_data_id");

                    b.Property<int>("EnumCritterLifeEventTypeId")
                        .HasColumnName("enum_critter_life_event_type_id");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("CritterLifeEventId");

                    b.HasIndex("CritterId");

                    b.HasIndex("EnumCritterLifeEventTypeId");

                    b.ToTable("critter_life_event");
                });

            modelBuilder.Entity("Database.Models.CritterLifeEventDatetime", b =>
                {
                    b.Property<int>("CritterLifeEventGiveBirthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("critter_life_event_give_birth_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateTime")
                        .HasColumnName("date_time")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("CritterLifeEventGiveBirthId")
                        .HasName("PK_critter_life_event_give_birth");

                    b.ToTable("critter_life_event_datetime");
                });

            modelBuilder.Entity("Database.Models.CritterType", b =>
                {
                    b.Property<int>("CritterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("critter_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<int>("GestrationPeriod")
                        .HasColumnName("gestration_period");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("CritterTypeId");

                    b.ToTable("critter_type");
                });

            modelBuilder.Entity("Database.Models.EnumCritterLifeEventCategory", b =>
                {
                    b.Property<int>("EnumCritterLifeEventCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("enum_critter_life_event_category_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("EnumCritterLifeEventCategoryId");

                    b.ToTable("enum_critter_life_event_category");
                });

            modelBuilder.Entity("Database.Models.EnumCritterLifeEventType", b =>
                {
                    b.Property<int>("EnumCritterLifeEventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("enum_critter_life_event_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowMultiple")
                        .HasColumnName("allow_multiple");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnName("data_type")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.Property<int>("EnumCritterLifeEventCategoryId")
                        .HasColumnName("enum_critter_life_event_category_id");

                    b.Property<bool>("FlagCantReproduce")
                        .HasColumnName("flag_cant_reproduce");

                    b.Property<bool>("FlagEndOfSystem")
                        .HasColumnName("flag_end_of_system");

                    b.Property<bool>("FlagIllness")
                        .HasColumnName("flag_illness");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("EnumCritterLifeEventTypeId");

                    b.ToTable("enum_critter_life_event_type");
                });

            modelBuilder.Entity("Database.Models.EnumLocationType", b =>
                {
                    b.Property<int>("EnumLocationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("enum_location_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("EnumLocationTypeId");

                    b.ToTable("enum_location_type");
                });

            modelBuilder.Entity("Database.Models.EnumProductType", b =>
                {
                    b.Property<int>("EnumProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("enum_product_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("EnumProductTypeId");

                    b.ToTable("enum_product_type");
                });

            modelBuilder.Entity("Database.Models.EnumVehicleLifeEventType", b =>
                {
                    b.Property<int>("EnumVehicleLifeEventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("enum_vehicle_life_event_type_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("EnumVehicleLifeEventTypeId");

                    b.ToTable("enum_vehicle_life_event_type");
                });

            modelBuilder.Entity("Database.Models.Holding", b =>
                {
                    b.Property<int>("HoldingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("holding_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasMaxLength(100);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<int>("ContactId")
                        .HasColumnName("contact_id");

                    b.Property<string>("GridReference")
                        .IsRequired()
                        .HasColumnName("grid_reference")
                        .HasMaxLength(50);

                    b.Property<string>("HoldingNumber")
                        .IsRequired()
                        .HasColumnName("holding_number")
                        .HasMaxLength(50);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnName("postcode")
                        .HasMaxLength(50);

                    b.Property<bool>("RegisterForCows")
                        .HasColumnName("register_for_cows");

                    b.Property<bool>("RegisterForFish")
                        .HasColumnName("register_for_fish");

                    b.Property<bool>("RegisterForPigs")
                        .HasColumnName("register_for_pigs");

                    b.Property<bool>("RegisterForPoultry")
                        .HasColumnName("register_for_poultry");

                    b.Property<bool>("RegisterForSheepGoats")
                        .HasColumnName("register_for_sheep_goats");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("HoldingId");

                    b.HasIndex("ContactId");

                    b.ToTable("holding");
                });

            modelBuilder.Entity("Database.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("location_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<int>("EnumLocationTypeId")
                        .HasColumnName("enum_location_type_id");

                    b.Property<int>("HoldingId")
                        .HasColumnName("holding_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("LocationId");

                    b.HasIndex("EnumLocationTypeId");

                    b.HasIndex("HoldingId");

                    b.HasIndex("ParentId");

                    b.ToTable("location");
                });

            modelBuilder.Entity("Database.Models.MenuHeader", b =>
                {
                    b.Property<int>("MenuHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menu_header_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationCode")
                        .HasColumnName("application_code");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasColumnName("image_uri")
                        .HasMaxLength(255);

                    b.Property<int>("MenuHeaderParentId")
                        .HasColumnName("menu_header_parent_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(50);

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("MenuHeaderId");

                    b.HasIndex("MenuHeaderParentId");

                    b.HasIndex("RoleId");

                    b.ToTable("menu_header");
                });

            modelBuilder.Entity("Database.Models.MenuHeaderItemMap", b =>
                {
                    b.Property<int>("MenuHeaderItemMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menu_header_item_map_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<int>("MenuHeaderId")
                        .HasColumnName("menu_header_id");

                    b.Property<int>("MenuItemId")
                        .HasColumnName("menu_item_id");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("MenuHeaderItemMapId");

                    b.HasIndex("MenuHeaderId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("menu_header_item_map");
                });

            modelBuilder.Entity("Database.Models.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("menu_item_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnName("action")
                        .HasMaxLength(50);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnName("controller")
                        .HasMaxLength(50);

                    b.Property<string>("IconUri")
                        .IsRequired()
                        .HasColumnName("icon_uri")
                        .HasMaxLength(255);

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<int>("SequenceNumber")
                        .HasColumnName("sequence_number");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(50);

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("MenuItemId");

                    b.ToTable("menu_item");
                });

            modelBuilder.Entity("Database.Models.PoultryClassification", b =>
                {
                    b.Property<int>("PoultryClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("poultry_classification_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<int>("CritterTypeId")
                        .HasColumnName("critter_type_id");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("PoultryClassificationId");

                    b.HasIndex("CritterTypeId");

                    b.ToTable("poultry_classification");
                });

            modelBuilder.Entity("Database.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<double>("DefaultVolume")
                        .HasColumnName("default_volume");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(100);

                    b.Property<int>("EnumProductTypeId")
                        .HasColumnName("enum_product_type_id");

                    b.Property<bool>("RequiresRefridgeration")
                        .HasColumnName("requires_refridgeration");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("ProductId");

                    b.HasIndex("EnumProductTypeId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("Database.Models.ProductPurchase", b =>
                {
                    b.Property<int>("ProductPurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_purchase_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnName("batch_number")
                        .HasMaxLength(50);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<decimal>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("money");

                    b.Property<DateTime>("DateTime")
                        .HasColumnName("date_time")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Expiry")
                        .HasColumnName("expiry")
                        .HasColumnType("date");

                    b.Property<int>("LocationId")
                        .HasColumnName("location_id");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id");

                    b.Property<int>("SupplierId")
                        .HasColumnName("supplier_id");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.Property<double>("Volume")
                        .HasColumnName("volume");

                    b.HasKey("ProductPurchaseId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("product_purchase");
                });

            modelBuilder.Entity("Database.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("role_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("RoleId");

                    b.ToTable("role");
                });

            modelBuilder.Entity("Database.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tag_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<int>("CritterId")
                        .HasColumnName("critter_id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnName("date_time")
                        .HasColumnType("datetime");

                    b.Property<string>("Rfid")
                        .IsRequired()
                        .HasColumnName("rfid")
                        .HasMaxLength(255);

                    b.Property<string>("Tag1")
                        .IsRequired()
                        .HasColumnName("tag")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("TagId");

                    b.HasIndex("CritterId");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("Database.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnName("registration_number")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.Property<double>("WeightKg")
                        .HasColumnName("weight_kg");

                    b.HasKey("VehicleId");

                    b.ToTable("vehicle");
                });

            modelBuilder.Entity("Database.Models.VehicleLifeEvent", b =>
                {
                    b.Property<int>("VehicleLifeEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_life_event_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateTime")
                        .HasColumnName("date_time")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.Property<int>("EnumVehicleLifeEventTypeId")
                        .HasColumnName("enum_vehicle_life_event_type_id");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("VehicleTrailerMapId")
                        .HasColumnName("vehicle_trailer_map_id");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("VehicleLifeEventId");

                    b.HasIndex("EnumVehicleLifeEventTypeId");

                    b.HasIndex("VehicleTrailerMapId");

                    b.ToTable("vehicle_life_event");
                });

            modelBuilder.Entity("Database.Models.VehicleLifeEventWash", b =>
                {
                    b.Property<int>("VehicleLifeEventWashId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_life_event_wash_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateTime")
                        .HasColumnName("date_time")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.Property<int>("VehicleLifeEventId")
                        .HasColumnName("vehicle_life_event_id");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("VehicleLifeEventWashId");

                    b.ToTable("vehicle_life_event_wash");
                });

            modelBuilder.Entity("Database.Models.VehicleTrailerMap", b =>
                {
                    b.Property<int>("VehicleTrailerMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vehicle_trailer_map_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("timestamp");

                    b.Property<int>("TrailerId")
                        .HasColumnName("trailer_id");

                    b.Property<int>("VehicleMainId")
                        .HasColumnName("vehicle_main_id");

                    b.Property<int>("VersionNumber")
                        .HasColumnName("version_number");

                    b.HasKey("VehicleTrailerMapId");

                    b.HasIndex("TrailerId");

                    b.HasIndex("VehicleMainId");

                    b.ToTable("vehicle_trailer_map");
                });

            modelBuilder.Entity("Database.Models.Breed", b =>
                {
                    b.HasOne("Database.Models.Contact", "BreedSocietyContact")
                        .WithMany("Breed")
                        .HasForeignKey("BreedSocietyContactId")
                        .HasConstraintName("FK_breed_contact");

                    b.HasOne("Database.Models.CritterType", "CritterType")
                        .WithMany("Breed")
                        .HasForeignKey("CritterTypeId")
                        .HasConstraintName("FK_breed_critter_type");
                });

            modelBuilder.Entity("Database.Models.Critter", b =>
                {
                    b.HasOne("Database.Models.Breed", "Breed")
                        .WithMany("Critter")
                        .HasForeignKey("BreedId")
                        .HasConstraintName("FK_critter_breed");

                    b.HasOne("Database.Models.CritterImage", "CritterImage")
                        .WithMany("Critter")
                        .HasForeignKey("CritterImageId")
                        .HasConstraintName("FK_critter_critter_image");

                    b.HasOne("Database.Models.CritterType", "CritterType")
                        .WithMany("Critter")
                        .HasForeignKey("CritterTypeId")
                        .HasConstraintName("FK_critter_critter_type");

                    b.HasOne("Database.Models.Critter", "DadCritter")
                        .WithMany("InverseDadCritter")
                        .HasForeignKey("DadCritterId")
                        .HasConstraintName("FK_critter_critter1");

                    b.HasOne("Database.Models.Critter", "MumCritter")
                        .WithMany("InverseMumCritter")
                        .HasForeignKey("MumCritterId")
                        .HasConstraintName("FK_critter_critter");

                    b.HasOne("Database.Models.Contact", "OwnerContact")
                        .WithMany("Critter")
                        .HasForeignKey("OwnerContactId")
                        .HasConstraintName("FK_critter_contact");
                });

            modelBuilder.Entity("Database.Models.CritterImageVariant", b =>
                {
                    b.HasOne("Database.Models.CritterImage", "CritterImageModified")
                        .WithMany("CritterImageVariantCritterImageModified")
                        .HasForeignKey("CritterImageModifiedId")
                        .HasConstraintName("FK_critter_image_variant_critter_image2");

                    b.HasOne("Database.Models.CritterImage", "CritterImageOriginal")
                        .WithMany("CritterImageVariantCritterImageOriginal")
                        .HasForeignKey("CritterImageOriginalId")
                        .HasConstraintName("FK_critter_image_variant_critter_image");
                });

            modelBuilder.Entity("Database.Models.CritterLifeEvent", b =>
                {
                    b.HasOne("Database.Models.Critter", "Critter")
                        .WithMany("CritterLifeEvent")
                        .HasForeignKey("CritterId")
                        .HasConstraintName("FK_critter_life_event_critter");

                    b.HasOne("Database.Models.EnumCritterLifeEventType", "EnumCritterLifeEventType")
                        .WithMany("CritterLifeEvent")
                        .HasForeignKey("EnumCritterLifeEventTypeId")
                        .HasConstraintName("FK_critter_life_event_enum_critter_life_event_type");
                });

            modelBuilder.Entity("Database.Models.Holding", b =>
                {
                    b.HasOne("Database.Models.Contact", "Contact")
                        .WithMany("Holding")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_holding_contact");
                });

            modelBuilder.Entity("Database.Models.Location", b =>
                {
                    b.HasOne("Database.Models.EnumLocationType", "EnumLocationType")
                        .WithMany("Location")
                        .HasForeignKey("EnumLocationTypeId")
                        .HasConstraintName("FK_location_enum_location_type");

                    b.HasOne("Database.Models.Holding", "Holding")
                        .WithMany("Location")
                        .HasForeignKey("HoldingId")
                        .HasConstraintName("FK_location_holding");

                    b.HasOne("Database.Models.Location", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_location_location");
                });

            modelBuilder.Entity("Database.Models.MenuHeader", b =>
                {
                    b.HasOne("Database.Models.MenuHeader", "MenuHeaderParent")
                        .WithMany("InverseMenuHeaderParent")
                        .HasForeignKey("MenuHeaderParentId")
                        .HasConstraintName("FK_menu_header_menu_header");

                    b.HasOne("Database.Models.Role", "Role")
                        .WithMany("MenuHeader")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_menu_header_role");
                });

            modelBuilder.Entity("Database.Models.MenuHeaderItemMap", b =>
                {
                    b.HasOne("Database.Models.MenuHeader", "MenuHeader")
                        .WithMany("MenuHeaderItemMap")
                        .HasForeignKey("MenuHeaderId")
                        .HasConstraintName("FK_menu_header_item_map_menu_header");

                    b.HasOne("Database.Models.MenuItem", "MenuItem")
                        .WithMany("MenuHeaderItemMap")
                        .HasForeignKey("MenuItemId")
                        .HasConstraintName("FK_menu_header_item_map_menu_item");
                });

            modelBuilder.Entity("Database.Models.PoultryClassification", b =>
                {
                    b.HasOne("Database.Models.CritterType", "CritterType")
                        .WithMany("PoultryClassification")
                        .HasForeignKey("CritterTypeId")
                        .HasConstraintName("FK_poultry_classification_critter_type");
                });

            modelBuilder.Entity("Database.Models.Product", b =>
                {
                    b.HasOne("Database.Models.EnumProductType", "EnumProductType")
                        .WithMany("Product")
                        .HasForeignKey("EnumProductTypeId")
                        .HasConstraintName("FK_product_enum_product_type");
                });

            modelBuilder.Entity("Database.Models.ProductPurchase", b =>
                {
                    b.HasOne("Database.Models.Location", "Location")
                        .WithMany("ProductPurchase")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_product_purchase_location");

                    b.HasOne("Database.Models.Product", "Product")
                        .WithMany("ProductPurchase")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_product_purchase_product");

                    b.HasOne("Database.Models.Contact", "Supplier")
                        .WithMany("ProductPurchase")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_product_purchase_supplier");
                });

            modelBuilder.Entity("Database.Models.Tag", b =>
                {
                    b.HasOne("Database.Models.Critter", "Critter")
                        .WithMany("Tag")
                        .HasForeignKey("CritterId")
                        .HasConstraintName("FK_tag_critter");
                });

            modelBuilder.Entity("Database.Models.VehicleLifeEvent", b =>
                {
                    b.HasOne("Database.Models.EnumVehicleLifeEventType", "EnumVehicleLifeEventType")
                        .WithMany("VehicleLifeEvent")
                        .HasForeignKey("EnumVehicleLifeEventTypeId")
                        .HasConstraintName("FK_vehicle_life_event_enum_vehicle_life_event_type");

                    b.HasOne("Database.Models.VehicleTrailerMap", "VehicleTrailerMap")
                        .WithMany("VehicleLifeEvent")
                        .HasForeignKey("VehicleTrailerMapId")
                        .HasConstraintName("FK_vehicle_life_event_vehicle_trailer_map");
                });

            modelBuilder.Entity("Database.Models.VehicleTrailerMap", b =>
                {
                    b.HasOne("Database.Models.Vehicle", "Trailer")
                        .WithMany("VehicleTrailerMapTrailer")
                        .HasForeignKey("TrailerId")
                        .HasConstraintName("FK_vehicle_trailer_map_vehicle1");

                    b.HasOne("Database.Models.Vehicle", "VehicleMain")
                        .WithMany("VehicleTrailerMapVehicleMain")
                        .HasForeignKey("VehicleMainId")
                        .HasConstraintName("FK_vehicle_trailer_map_vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
